# Generated by Django 3.0.6 on 2020-05-23 10:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_name', models.CharField(max_length=100, unique=True)),
                ('activity_type', models.CharField(max_length=100)),
                ('year', models.PositiveSmallIntegerField()),
                ('activity_unit', models.CharField(max_length=120)),
                ('in_university', models.BooleanField()),
                ('place', models.CharField(max_length=200)),
                ('target_participants', models.PositiveIntegerField()),
                ('predicted_participants', models.PositiveIntegerField()),
                ('actual_participants', models.PositiveIntegerField()),
                ('activity_date_begin', models.DateField()),
                ('activity_date_end', models.DateField()),
                ('project_date_begin', models.DateField()),
                ('project_date_end', models.DateField()),
                ('activity_hour', models.PositiveSmallIntegerField()),
                ('activity_leader_studentID', models.CharField(blank=True, max_length=11)),
                ('activity_leader_firstname', models.CharField(max_length=40)),
                ('activity_leader_lastname', models.CharField(max_length=70)),
                ('budget', models.FloatField()),
            ],
            options={
                'ordering': ['-year', 'activity_date_begin'],
            },
        ),
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('advisorID', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('academic_rank', models.CharField(choices=[('ศ. ดร.', 'ศาตราจารย์ดอกเตอร์'), ('ศ.', 'ศาตราจารย์'), ('รศ. ดร.', 'รองศาตราจารย์ดอกเตอร์'), ('รศ.', 'รองศาตราจารย์'), ('ผศ. ดร.', 'ผู้ช่วยศาตราจารย์ดอกเตอร์'), ('ผศ.', 'ผู้ช่วยศาตราจารย์'), ('ดร.', 'ดอกเตอร์'), ('อ.', 'อาจารย์')], max_length=8)),
                ('faculty', models.CharField(max_length=60)),
                ('department', models.CharField(max_length=80)),
            ],
            options={
                'ordering': ['-academic_rank'],
            },
        ),
        migrations.CreateModel(
            name='QF',
            fields=[
                ('QFID', models.CharField(max_length=4, primary_key=True, serialize=False, unique=True)),
                ('QF_name', models.CharField(max_length=60, unique=True)),
                ('QF_description', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'Student'), (2, 'Advisor'), (3, 'Staff')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('studentID', models.CharField(max_length=11, primary_key=True, serialize=False, unique=True)),
                ('year_of_study', models.PositiveSmallIntegerField(choices=[(1, 'Freshmen'), (2, 'Sophomore'), (3, 'Junior'), (4, 'Senior'), (5, '5th-year'), (6, '6th-year'), (7, '7th-year'), (8, '8th-year'), (9, 'Graduate')])),
                ('degree_of_study', models.CharField(max_length=80)),
                ('faculty', models.CharField(max_length=60)),
                ('department', models.CharField(max_length=80)),
                ('field_of_study', models.CharField(max_length=80)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('year_advisor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='year_advise', to='QFSci_manager.Advisor')),
            ],
            options={
                'ordering': ['studentID'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('is_admin', models.BooleanField(default=False)),
                ('staffID', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('working_unit', models.CharField(max_length=60)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Evaluate_QF_student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField()),
                ('date_evaluated', models.DateTimeField(auto_now_add=True)),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('qf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QFSci_manager.QF')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QFSci_manager.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Evaluate_QF_activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField()),
                ('date_evaluated', models.DateTimeField(auto_now_add=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QFSci_manager.Activity')),
                ('evaluator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('qf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QFSci_manager.QF')),
            ],
        ),
        migrations.AddField(
            model_name='advisor',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='activity',
            name='QFs',
            field=models.ManyToManyField(related_name='activity_qf', to='QFSci_manager.QF'),
        ),
        migrations.AddField(
            model_name='activity',
            name='activity_advisor',
            field=models.ManyToManyField(related_name='advise_activity', to='QFSci_manager.Advisor'),
        ),
        migrations.AddField(
            model_name='activity',
            name='joined_students',
            field=models.ManyToManyField(related_name='join_activity', to='QFSci_manager.Student'),
        ),
    ]
